{"version":3,"file":"static/js/323.eaef7b46.chunk.js","mappings":"+NAKMA,EAAUC,EAAAA,EAAAA,MAyBhB,EAvBqB,SAAC,GAQe,IAPnCC,EAOkC,EAPlCA,KACAC,EAMkC,EANlCA,YACAC,EAKkC,EALlCA,eACAC,EAIkC,EAJlCA,OACAC,EAGkC,EAHlCA,MACAC,EAEkC,EAFlCA,SACAC,EACkC,EADlCA,SAEA,OACE,SAAC,KAAD,CACEC,KAAMT,EACNU,iBAAkBC,EAAAA,GAClBH,SAAUA,EACVI,eAAgBN,EAChBO,MAAO,EACL,SAAC,KAAD,CAAqCX,KAAAA,EAAMC,YAAAA,EAAaC,eAAAA,GAAtC,cAClB,SAAC,KAAD,CAAyCC,OAAAA,EAAQC,MAAAA,EAAOC,SAAAA,GAApC,mB,oBCU5B,EA7BqB,SAAC,GAAmE,IAAjED,EAAgE,EAAhEA,MAAOE,EAAyD,EAAzDA,SAAUM,EAA+C,EAA/CA,WAC/BC,GAAgBC,EAAAA,EAAAA,MAAhBD,YAER,OACE,iBAAKE,UAAU,6BAA6BC,GAAG,gBAAgBC,IAAKX,EAApE,WACE,kBAAOY,KAAK,WAAWC,MAAM,QAA7B,SACGP,EAAWC,KAEbT,IACC,gBAAKW,UAAU,6BAAf,UACE,SAAC,EAAAK,WAAD,CAAYL,UAAU,gBAAtB,mBAA0CX,EAAMiB,IAAhD,YAAuDjB,EAAMkB,aAGjE,gBAAKP,UAAU,6BAAf,SACGX,GACCA,EAAMmB,WACNnB,EAAMmB,UAAUC,KAAI,SAACC,EAAUC,GAAX,aAClB,SAACC,EAAD,CAEEvB,MAAOqB,EACPC,cAAeA,EACfE,aAAY,OAAExB,QAAF,IAAEA,GAAF,UAAEA,EAAOmB,iBAAT,aAAE,EAAkBM,QAJlC,gBACgBH,aAmBtBC,EAAe,SAAC,GAA4E,IAA1EvB,EAAyE,EAAzEA,MAAOsB,EAAkE,EAAlEA,cAAeE,EAAmD,EAAnDA,aAC5C,OACE,SAAC,KAAD,CAEEb,UAAU,GACVa,aAAcA,EACdE,KAAMC,EAAAA,GAAAA,KACN3B,MAAOA,EACP4B,oBAAqBC,EAAAA,GAAAA,MANvB,wBACwBP,GAAiB,KC3B7C,G,QAZkB,WAChB,IAAMpB,GAAW4B,EAAAA,EAAAA,QAAuB,MAClCC,GAAOC,EAAAA,EAAAA,IAAe,CAAE9B,SAAAA,IAE9B,OACE,iBAAKS,UAAU,OAAOC,GAAG,aAAzB,WACE,SAAC,GAAD,UAAkBmB,KAClB,SAAC,GAAD,UAAkBA","sources":["modules/chord/components/ChordToolBar.tsx","modules/chord/components/ChordContent.tsx","modules/chord/ChordPage.tsx"],"sourcesContent":["import { chordGuitarTypes, GuitarChordHook } from '../../../hooks';\nimport { ChordSelector, KeySelector, Toolbar } from '../../../common';\nimport React from 'react';\nimport { Pages } from '../../../common/routing/pages';\n\nconst context = Pages.CHORD;\n\nconst ChordToolBar = ({\n  keys,\n  selectedKey,\n  setSelectedKey,\n  chords,\n  chord,\n  setChord,\n  printRef,\n}: GuitarChordHook): JSX.Element => {\n  return (\n    <Toolbar\n      page={context}\n      supportedGuitars={chordGuitarTypes}\n      printRef={printRef}\n      printDisabled={!chord}\n      tools={[\n        <KeySelector key={'caged-key'} {...{ keys, selectedKey, setSelectedKey }} />,\n        <ChordSelector key={'caged-chord'} {...{ chords, chord, setChord }} />,\n      ]}\n    />\n  );\n};\n\nexport default ChordToolBar;\n","import { useSettings, GuitarChordHook, ChordPosition } from '../../../hooks';\nimport { Diagram, DotText, FretNumberPosition } from '../../../common/fretboard';\nimport React from 'react';\nimport { Typography } from '@material-tailwind/react';\n\nconst ChordContent = ({ chord, printRef, printStyle }: GuitarChordHook): JSX.Element => {\n  const { orientation } = useSettings();\n\n  return (\n    <div className=\"flex flex-col items-center\" id=\"chord-content\" ref={printRef}>\n      <style type=\"text/css\" media=\"print\">\n        {printStyle(orientation)}\n      </style>\n      {chord && (\n        <div className=\"flex flex-row items-center\">\n          <Typography className=\"text-3xl pt-2\">{`${chord.key} ${chord.suffix}`}</Typography>\n        </div>\n      )}\n      <div className=\"flex flex-row items-center\">\n        {chord &&\n          chord.positions &&\n          chord.positions.map((position, chordPosition) => (\n            <ChordDiagram\n              key={`chord-${chordPosition}`}\n              chord={position}\n              chordPosition={chordPosition}\n              diagramCount={chord?.positions?.length}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChordContent;\n\ntype ChordDiagramProps = {\n  chord?: ChordPosition;\n  chordPosition?: number;\n  diagramCount?: number;\n};\n\nconst ChordDiagram = ({ chord, chordPosition, diagramCount }: ChordDiagramProps): JSX.Element => {\n  return (\n    <Diagram\n      key={`chord-diagram.${chordPosition || 0}`}\n      className=\"\"\n      diagramCount={diagramCount}\n      text={DotText.NOTE}\n      chord={chord}\n      fretNumbersPosition={FretNumberPosition.LEFT}\n    />\n  );\n};\n","import React, { useRef } from 'react';\nimport { useGuitarChord } from '../../hooks';\nimport ChordToolBar from './components/ChordToolBar';\nimport ChordContent from './components/ChordContent';\nimport '../../common/Page.css';\n\nconst ChordPage = (): JSX.Element => {\n  const printRef = useRef<HTMLDivElement>(null);\n  const hook = useGuitarChord({ printRef });\n\n  return (\n    <div className=\"page\" id=\"chord-page\">\n      <ChordToolBar {...hook} />\n      <ChordContent {...hook} />\n    </div>\n  );\n};\n\nexport default ChordPage;\n"],"names":["context","Pages","keys","selectedKey","setSelectedKey","chords","chord","setChord","printRef","page","supportedGuitars","chordGuitarTypes","printDisabled","tools","printStyle","orientation","useSettings","className","id","ref","type","media","Typography","key","suffix","positions","map","position","chordPosition","ChordDiagram","diagramCount","length","text","DotText","fretNumbersPosition","FretNumberPosition","useRef","hook","useGuitarChord"],"sourceRoot":""}