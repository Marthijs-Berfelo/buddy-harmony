{"version":3,"file":"static/js/258.6efe16f0.chunk.js","mappings":"sNAkBMA,EAAkB,SAACC,GAAD,OACtBC,EAAAA,GAAAA,WAA2B,SAACC,GAAD,OAAUA,EAAKC,OAASH,EAAOG,SAAS,G,6BCb/DC,EAAUC,EAAAA,EAAAA,MAyBhB,EAvBqB,SAAC,GAQe,IAPnCC,EAOkC,EAPlCA,KACAC,EAMkC,EANlCA,YACAC,EAKkC,EALlCA,eACAC,EAIkC,EAJlCA,OACAC,EAGkC,EAHlCA,MACAC,EAEkC,EAFlCA,SACAC,EACkC,EADlCA,SAEA,OACE,SAAC,KAAD,CACEC,KAAMT,EACNU,iBAAkBb,EAAAA,GAClBW,SAAUA,EACVG,eAAgBL,EAChBM,MAAO,EACL,SAAC,KAAD,CAAqCV,KAAAA,EAAMC,YAAAA,EAAaC,eAAAA,GAAtC,cAClB,SAAC,KAAD,CAAyCC,OAAAA,EAAQC,MAAAA,EAAOC,SAAAA,GAApC,mB,UCU5B,EA7BqB,SAAC,GAAmE,IAAjED,EAAgE,EAAhEA,MAAOE,EAAyD,EAAzDA,SAAUK,EAA+C,EAA/CA,WAC/BC,GAAgBC,EAAAA,EAAAA,MAAhBD,YAER,OACE,iBAAKE,UAAU,6BAA6BC,GAAG,gBAAgBC,IAAKV,EAApE,WACE,kBAAOV,KAAK,WAAWqB,MAAM,QAA7B,SACGN,EAAWC,KAEbR,IACC,gBAAKU,UAAU,6BAAf,UACE,SAAC,EAAAI,WAAD,CAAYJ,UAAU,gBAAtB,mBAA0CV,EAAMe,IAAhD,YAAuDf,EAAMgB,aAGjE,gBAAKN,UAAU,6BAAf,SACGV,GACCA,EAAMiB,WACNjB,EAAMiB,UAAUC,KAAI,SAACC,EAAUC,GAAX,aAClB,SAACC,EAAD,CAEErB,MAAOmB,EACPC,cAAeA,EACfE,aAAY,OAAEtB,QAAF,IAAEA,GAAF,UAAEA,EAAOiB,iBAAT,aAAE,EAAkBM,QAJlC,gBACgBH,aAmBtBC,EAAe,SAAC,GAA4E,IAA1ErB,EAAyE,EAAzEA,MAAOoB,EAAkE,EAAlEA,cAAeE,EAAmD,EAAnDA,aAC5C,OACE,SAAC,KAAD,CAEEZ,UAAU,GACVY,aAAcA,EACdE,KAAMC,EAAAA,GAAAA,KACNzB,MAAOA,EACP0B,oBAAqBC,EAAAA,GAAAA,MANvB,wBACwBP,GAAiB,KC5B7C,G,QAZkB,WAChB,IACMQ,EHasB,SAAC,GAAmD,IAAjD1B,EAAgD,EAAhDA,SAC/B,GAA8C2B,EAAAA,EAAAA,MAAtCjC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,eACnBgC,GAAerB,EAAAA,EAAAA,MAAfqB,WACR,GAA4BC,EAAAA,EAAAA,UAAwB,IAApD,eAAOhC,EAAP,KAAeiC,EAAf,KACA,GAA0BD,EAAAA,EAAAA,YAA1B,eAAO/B,EAAP,KAAcC,EAAd,KAmBA,OAjBAgC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IACEJ,EACAjC,EACAR,EACA8C,EAAAA,GACAH,EACA/B,EACAD,KAED,CAAC8B,EAAYjC,IAOT,CACLD,KAAAA,EACAC,YAAAA,EACAC,eAAAA,EACAC,OAAAA,EACAC,MAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAK,WAbiB,SAACC,GAAD,kCAEfA,IAAgB4B,EAAAA,GAAAA,WAAyB,YAAc,WAFxC,oCG/BNC,CAAe,CAAEnC,UADboC,EAAAA,EAAAA,QAAuB,QAGxC,OACE,iBAAK5B,UAAU,OAAOC,GAAG,aAAzB,WACE,SAAC,GAAD,UAAkBiB,KAClB,SAAC,GAAD,UAAkBA","sources":["modules/chord/hooks/use-guitar-chord.ts","modules/chord/components/ChordToolBar.tsx","modules/chord/components/ChordContent.tsx","modules/chord/ChordPage.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport {\n  KeysHook,\n  useKeys,\n  ChordDetail,\n  chordsForKey,\n  ChordsHook,\n  handleSelectionForChords,\n  useSettings,\n  chordGuitarTypes,\n  GuitarType,\n  Printable,\n  PrintableProps,\n} from '../../../hooks';\nimport { Orientation } from '../../../common/fretboard';\n\nexport interface GuitarChordHook extends KeysHook, ChordsHook, Printable {}\n\nconst isSupportedType = (guitar: GuitarType): boolean =>\n  chordGuitarTypes.findIndex((type) => type.name === guitar.name) > -1;\n\nexport const useGuitarChord = ({ printRef }: PrintableProps): GuitarChordHook => {\n  const { keys, selectedKey, setSelectedKey } = useKeys();\n  const { guitarType } = useSettings();\n  const [chords, setChords] = useState<ChordDetail[]>([]);\n  const [chord, setChord] = useState<ChordDetail>();\n\n  useEffect(() => {\n    handleSelectionForChords(\n      guitarType,\n      selectedKey,\n      isSupportedType,\n      chordsForKey,\n      setChords,\n      setChord,\n      chord\n    );\n  }, [guitarType, selectedKey]);\n\n  const printStyle = (orientation: Orientation): string =>\n    `@page: { size: A4 ${\n      orientation === Orientation.HORIZONTAL ? 'landscape' : 'portrait'\n    }, margin: 0mm 30mm 30mm 30mm }`;\n\n  return {\n    keys,\n    selectedKey,\n    setSelectedKey,\n    chords,\n    chord,\n    setChord,\n    printRef,\n    printStyle,\n  };\n};\n","import { chordGuitarTypes } from '../../../hooks';\nimport { ChordSelector, KeySelector, Toolbar } from '../../../common';\nimport React from 'react';\nimport { Pages } from '../../../common/routing/pages';\nimport { GuitarChordHook } from '../hooks';\n\nconst context = Pages.CHORD;\n\nconst ChordToolBar = ({\n  keys,\n  selectedKey,\n  setSelectedKey,\n  chords,\n  chord,\n  setChord,\n  printRef,\n}: GuitarChordHook): JSX.Element => {\n  return (\n    <Toolbar\n      page={context}\n      supportedGuitars={chordGuitarTypes}\n      printRef={printRef}\n      printDisabled={!chord}\n      tools={[\n        <KeySelector key={'caged-key'} {...{ keys, selectedKey, setSelectedKey }} />,\n        <ChordSelector key={'caged-chord'} {...{ chords, chord, setChord }} />,\n      ]}\n    />\n  );\n};\n\nexport default ChordToolBar;\n","import { useSettings, ChordPosition } from '../../../hooks';\nimport { Diagram, DotText, FretNumberPosition } from '../../../common/fretboard';\nimport React from 'react';\nimport { Typography } from '@material-tailwind/react';\nimport { GuitarChordHook } from '../hooks';\n\nconst ChordContent = ({ chord, printRef, printStyle }: GuitarChordHook): JSX.Element => {\n  const { orientation } = useSettings();\n\n  return (\n    <div className=\"flex flex-col items-center\" id=\"chord-content\" ref={printRef}>\n      <style type=\"text/css\" media=\"print\">\n        {printStyle(orientation)}\n      </style>\n      {chord && (\n        <div className=\"flex flex-row items-center\">\n          <Typography className=\"text-3xl pt-2\">{`${chord.key} ${chord.suffix}`}</Typography>\n        </div>\n      )}\n      <div className=\"flex flex-row items-center\">\n        {chord &&\n          chord.positions &&\n          chord.positions.map((position, chordPosition) => (\n            <ChordDiagram\n              key={`chord-${chordPosition}`}\n              chord={position}\n              chordPosition={chordPosition}\n              diagramCount={chord?.positions?.length}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChordContent;\n\ntype ChordDiagramProps = {\n  chord?: ChordPosition;\n  chordPosition?: number;\n  diagramCount?: number;\n};\n\nconst ChordDiagram = ({ chord, chordPosition, diagramCount }: ChordDiagramProps): JSX.Element => {\n  return (\n    <Diagram\n      key={`chord-diagram.${chordPosition || 0}`}\n      className=\"\"\n      diagramCount={diagramCount}\n      text={DotText.NOTE}\n      chord={chord}\n      fretNumbersPosition={FretNumberPosition.LEFT}\n    />\n  );\n};\n","import React, { useRef } from 'react';\nimport { useGuitarChord } from './hooks';\nimport ChordToolBar from './components/ChordToolBar';\nimport ChordContent from './components/ChordContent';\nimport '../../common/Page.css';\n\nconst ChordPage = (): JSX.Element => {\n  const printRef = useRef<HTMLDivElement>(null);\n  const hook = useGuitarChord({ printRef });\n\n  return (\n    <div className=\"page\" id=\"chord-page\">\n      <ChordToolBar {...hook} />\n      <ChordContent {...hook} />\n    </div>\n  );\n};\n\nexport default ChordPage;\n"],"names":["isSupportedType","guitar","chordGuitarTypes","type","name","context","Pages","keys","selectedKey","setSelectedKey","chords","chord","setChord","printRef","page","supportedGuitars","printDisabled","tools","printStyle","orientation","useSettings","className","id","ref","media","Typography","key","suffix","positions","map","position","chordPosition","ChordDiagram","diagramCount","length","text","DotText","fretNumbersPosition","FretNumberPosition","hook","useKeys","guitarType","useState","setChords","useEffect","handleSelectionForChords","chordsForKey","Orientation","useGuitarChord","useRef"],"sourceRoot":""}