{"version":3,"file":"static/js/323.557e89ff.chunk.js","mappings":"mPAOMA,EAAUC,EAAAA,EAAAA,MAqDhB,EAnDqB,SAAC,GAQe,IAPnCC,EAOkC,EAPlCA,KACAC,EAMkC,EANlCA,YACAC,EAKkC,EALlCA,eACAC,EAIkC,EAJlCA,OACAC,EAGkC,EAHlCA,MACAC,EAEkC,EAFlCA,SACAC,EACkC,EADlCA,SAEQC,GAAMC,EAAAA,EAAAA,GAAe,SAArBD,EACR,OACE,SAAC,IAAD,CACEE,KAAMX,EACNY,iBAAkBC,EAAAA,GAClBL,SAAUA,EACVM,MAAO,EACL,SAAC,EAAAC,OAAD,CAEEC,MAAOP,EAAE,cACTQ,UAAU,kCACVC,SAAU,SAACC,GACsC,IAAD,EAArC,OAALA,QAAK,IAALA,GAAAA,EAAOC,MAAY,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOC,OAAQjB,GAC/BC,EAAc,OAACe,QAAD,IAACA,GAAD,UAACA,EAAOC,WAAR,aAAC,EAAYC,YAE7B,OAAOF,GARX,SAWGjB,EAAKoB,KAAI,SAACC,GAAD,OACR,SAAC,EAAAC,OAAD,UAA0BD,GAAbA,OAXV,eAcP,SAAC,EAAAR,OAAD,CAEEC,MAAOP,EAAE,oBAAqB,CAAET,QAAAA,IAChCiB,UAAU,6BACVC,SAAU,SAACC,GACgC,IAAD,EAA/B,OAALA,QAAK,IAALA,GAAAA,EAAOC,MAAY,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOC,OAAQd,GAC/BC,EAAQ,OAACY,QAAD,IAACA,GAAD,UAACA,EAAOC,WAAR,aAAC,EAAYC,YAEvB,OAAOF,GARX,SAWGd,EAAOiB,KAAI,SAACG,GAAD,OACV,SAAC,EAAAD,OAAD,UAA2BC,GAAdA,OAXV,mB,UCLf,EA/BqB,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,WAAYlB,EAAyD,EAAzDA,SAAUmB,EAA+C,EAA/CA,WACpCC,GAAgBC,EAAAA,EAAAA,MAAhBD,YAER,OACE,iBAAKX,UAAU,6BAA6Ba,GAAG,gBAAgBC,IAAKvB,EAApE,WACE,kBAAOwB,KAAK,WAAWC,MAAM,QAA7B,SACGN,EAAWC,KAEbF,IACC,gBAAKT,UAAU,6BAAf,UACE,SAAC,EAAAiB,WAAD,CAAYjB,UAAU,gBAAtB,mBAA0CS,EAAWN,IAArD,YAA4DM,EAAWS,aAG3E,gBAAKlB,UAAU,6BAAf,SACGS,GAAcA,EAAWU,UACxBV,EAAWU,UAAUd,KAAI,SAAChB,EAAO+B,GAAR,aACvB,SAACC,EAAD,CAEEhC,MAAOA,EACP+B,cAAeA,EACfE,aAAY,OAAEb,QAAF,IAAEA,GAAF,UAAEA,EAAYU,iBAAd,aAAE,EAAuBI,QAJvC,gBACgBH,QAOlB,SAACC,EAAD,UAeJA,EAAe,SAAC,GAA4E,IAA1EhC,EAAyE,EAAzEA,MAAO+B,EAAkE,EAAlEA,cAAeE,EAAmD,EAAnDA,aAC5C,OACE,SAAC,KAAD,CAEEtB,UAAU,GACVsB,aAAcA,EACdE,KAAMC,EAAAA,GAAAA,KACNpC,MAAOA,EACPqC,oBAAqBC,EAAAA,GAAAA,MANvB,wBACwBP,GAAiB,KC7B7C,G,QAZkB,WAChB,IAAM7B,GAAWqC,EAAAA,EAAAA,QAAuB,MAClCC,GAAOC,EAAAA,EAAAA,IAAe,CAAEvC,SAAAA,IAE9B,OACE,iBAAKS,UAAU,OAAOa,GAAG,aAAzB,WACE,SAAC,GAAD,UAAkBgB,KAClB,SAAC,GAAD,UAAkBA","sources":["modules/chord/components/ChordToolBar.tsx","modules/chord/components/ChordContent.tsx","modules/chord/ChordPage.tsx"],"sourcesContent":["import { chordGuitarTypes, GuitarChordHook } from '../../../hooks';\nimport { Toolbar } from '../../../common';\nimport { Option, Select } from '@material-tailwind/react';\nimport React from 'react';\nimport { Pages } from '../../../common/routing/pages';\nimport { useTranslation } from 'react-i18next';\n\nconst context = Pages.CHORD;\n\nconst ChordToolBar = ({\n  keys,\n  selectedKey,\n  setSelectedKey,\n  chords,\n  chord,\n  setChord,\n  printRef,\n}: GuitarChordHook): JSX.Element => {\n  const { t } = useTranslation('chord');\n  return (\n    <Toolbar\n      page={context}\n      supportedGuitars={chordGuitarTypes}\n      printRef={printRef}\n      tools={[\n        <Select\n          key={'chord-note'}\n          label={t('common:key')}\n          className=\"flex items-center bg-white z-40\"\n          selected={(value) => {\n            if (value?.key && value?.key !== selectedKey) {\n              setSelectedKey(value?.key?.toString());\n            }\n            return value;\n          }}\n        >\n          {keys.map((noteOption) => (\n            <Option key={noteOption}>{noteOption}</Option>\n          ))}\n        </Select>,\n        <Select\n          key={'chord-chord'}\n          label={t('common:page.title', { context })}\n          className=\"flex items-center bg-white\"\n          selected={(value) => {\n            if (value?.key && value?.key !== chord) {\n              setChord(value?.key?.toString());\n            }\n            return value;\n          }}\n        >\n          {chords.map((chordOption) => (\n            <Option key={chordOption}>{chordOption}</Option>\n          ))}\n        </Select>,\n      ]}\n    />\n  );\n};\n\nexport default ChordToolBar;\n","import { useSettings, GuitarChordHook, ChordPosition } from '../../../hooks';\nimport { Diagram, DotText, FretNumberPosition } from '../../../common/fretboard';\nimport React from 'react';\nimport { Typography } from '@material-tailwind/react';\n\nconst ChordContent = ({ chordModel, printRef, printStyle }: GuitarChordHook): JSX.Element => {\n  const { orientation } = useSettings();\n\n  return (\n    <div className=\"flex flex-col items-center\" id=\"chord-content\" ref={printRef}>\n      <style type=\"text/css\" media=\"print\">\n        {printStyle(orientation)}\n      </style>\n      {chordModel && (\n        <div className=\"flex flex-row items-center\">\n          <Typography className=\"text-3xl pt-2\">{`${chordModel.key} ${chordModel.suffix}`}</Typography>\n        </div>\n      )}\n      <div className=\"flex flex-row items-center\">\n        {chordModel && chordModel.positions ? (\n          chordModel.positions.map((chord, chordPosition) => (\n            <ChordDiagram\n              key={`chord-${chordPosition}`}\n              chord={chord}\n              chordPosition={chordPosition}\n              diagramCount={chordModel?.positions?.length}\n            />\n          ))\n        ) : (\n          <ChordDiagram />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChordContent;\n\ntype ChordDiagramProps = {\n  chord?: ChordPosition;\n  chordPosition?: number;\n  diagramCount?: number;\n};\n\nconst ChordDiagram = ({ chord, chordPosition, diagramCount }: ChordDiagramProps): JSX.Element => {\n  return (\n    <Diagram\n      key={`chord-diagram.${chordPosition || 0}`}\n      className=\"\"\n      diagramCount={diagramCount}\n      text={DotText.NOTE}\n      chord={chord}\n      fretNumbersPosition={FretNumberPosition.LEFT}\n    />\n  );\n};\n","import React, { useRef } from 'react';\nimport { useGuitarChord } from '../../hooks';\nimport ChordToolBar from './components/ChordToolBar';\nimport ChordContent from './components/ChordContent';\nimport '../../common/Page.css';\n\nconst ChordPage = (): JSX.Element => {\n  const printRef = useRef<HTMLDivElement>(null);\n  const hook = useGuitarChord({ printRef });\n\n  return (\n    <div className=\"page\" id=\"chord-page\">\n      <ChordToolBar {...hook} />\n      <ChordContent {...hook} />\n    </div>\n  );\n};\n\nexport default ChordPage;\n"],"names":["context","Pages","keys","selectedKey","setSelectedKey","chords","chord","setChord","printRef","t","useTranslation","page","supportedGuitars","chordGuitarTypes","tools","Select","label","className","selected","value","key","toString","map","noteOption","Option","chordOption","chordModel","printStyle","orientation","useSettings","id","ref","type","media","Typography","suffix","positions","chordPosition","ChordDiagram","diagramCount","length","text","DotText","fretNumbersPosition","FretNumberPosition","useRef","hook","useGuitarChord"],"sourceRoot":""}